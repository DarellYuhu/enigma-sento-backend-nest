generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  username         String          @unique
  password         String
  displayName      String
  role             Role
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Feedback         Feedback[]
  Layout           Layout[]
  ApprovedProposal Proposal[]      @relation("Approver")
  AuthoredProposal Proposal[]      @relation("Author")
  Workgroup        Workgroup[]
  WorkgroupUser    WorkgroupUser[]
}

model Workgroup {
  id                  String                @id @default(uuid())
  name                String
  session             Int
  managerId           String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  projectStoryPerUser Int
  withTicket          Boolean               @default(false)
  ContentDistribution ContentDistribution[]
  DistributionGroup   GroupDistribution[]
  Project             Project[]
  Proposal            Proposal[]
  TaskHistory         TaskHistory[]
  Manager             User                  @relation(fields: [managerId], references: [id])
  WorkgroupUser       WorkgroupUser[]
}

model WorkgroupUser {
  id                Int                 @id @default(autoincrement())
  userId            String
  workgroupId       String
  isDeleted         Boolean             @default(false)
  Project           Project[]
  User              User                @relation(fields: [userId], references: [id])
  Workgroup         Workgroup           @relation(fields: [workgroupId], references: [id])
  WorkgroupUserTask WorkgroupUserTask[]

  @@unique([workgroupId, userId])
}

model GroupDistribution {
  code                String
  amontOfTroops       Int
  workgroupId         String
  id                  String                @id @default(uuid())
  isDeleted           Boolean               @default(false)
  ContentDistribution ContentDistribution[]
  Workgroup           Workgroup             @relation(fields: [workgroupId], references: [id])
  WorkgroupUserTask   WorkgroupUserTask[]

  @@unique([code, workgroupId])
}

model TaskHistory {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  workgroupId       String
  Workgroup         Workgroup           @relation(fields: [workgroupId], references: [id])
  WorkgroupUserTask WorkgroupUserTask[]
}

model WorkgroupUserTask {
  workgroupUserId     Int
  groupDistributionId String
  taskHistoryId       Int
  GroupDistribution   GroupDistribution @relation(fields: [groupDistributionId], references: [id])
  TaskHistory         TaskHistory       @relation(fields: [taskHistoryId], references: [id])
  WorkgroupUser       WorkgroupUser     @relation(fields: [workgroupUserId], references: [id])

  @@unique([workgroupUserId, groupDistributionId, taskHistoryId])
}

model Project {
  id                  String                @id @default(uuid())
  name                String
  status              Boolean               @default(false)
  workgroupUserId     Int
  workgroupId         String
  allocationType      AllocationType
  captions            String[]
  hashtags            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  ContentDistribution ContentDistribution[]
  Workgroup           Workgroup             @relation(fields: [workgroupId], references: [id])
  WorkgroupUser       WorkgroupUser         @relation(fields: [workgroupUserId], references: [id])
  Proposal            Proposal?
  Story               Story[]

  @@unique([name, workgroupUserId])
}

model Story {
  id                  String                @id @default(uuid())
  projectId           String
  ContentDistribution ContentDistribution[]
  DistributionStory   DistributionStory[]
  Project             Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Content             Content[]
}

model DistributionStory {
  contentDistributionId String
  storyId               String
  amountOfContents      Int
  offset                Int
  ContentDistribution   ContentDistribution @relation(fields: [contentDistributionId], references: [id], onDelete: Cascade)
  Story                 Story               @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([contentDistributionId, storyId])
}

model ContentDistribution {
  id        String   @id @default(uuid())
  session   Int
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  storyId               String?
  workgroupId           String
  groupDistributionCode String
  projectId             String

  GroupDistribution GroupDistribution   @relation(fields: [groupDistributionCode], references: [id])
  Project           Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Workgroup         Workgroup           @relation(fields: [workgroupId], references: [id])
  DistributionStory DistributionStory[]
  content           Content[]
  Story             Story?              @relation(fields: [storyId], references: [id])

  @@unique([workgroupId, groupDistributionCode, session, projectId, storyId], name: "uniqueConstraint")
}

model Content {
  id          String  @id @default(uuid())
  isGenerated Boolean @default(false)

  contentDistributionId String
  storyId               String

  contentFile         ContentFile[]
  contentDistribution ContentDistribution @relation(fields: [contentDistributionId], references: [id], onDelete: Cascade)
  story               Story               @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model ContentFile {
  id        Int    @id @default(autoincrement())
  contentId String
  fileId    Int

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  file    File    @relation(fields: [fileId], references: [id])

  @@unique([contentId, fileId])
}

model Proposal {
  id              String         @id @default(uuid())
  title           String
  status          ProposalStatus @default(WAITING)
  authorId        String
  approverId      String?
  projectId       String?        @unique
  submissionId    Int?           @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  approvedAt      DateTime?
  workgroupId     String
  Approver        User?          @relation("Approver", fields: [approverId], references: [id])
  Author          User           @relation("Author", fields: [authorId], references: [id])
  Project         Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  FinalSubmission Submission?    @relation("finalSubmission", fields: [submissionId], references: [id])
  Workgroup       Workgroup      @relation(fields: [workgroupId], references: [id])
  Submission      Submission[]   @relation("Submission")
}

model Submission {
  id              Int            @id @default(autoincrement())
  filePath        String
  status          ProposalStatus @default(WAITING)
  proposalId      String
  createdAt       DateTime       @default(now())
  updateAt        DateTime       @updatedAt
  fileName        String
  Feedback        Feedback[]
  FinalSubmission Proposal?      @relation("finalSubmission")
  Proposal        Proposal       @relation("Submission", fields: [proposalId], references: [id], onDelete: Cascade)
}

model Feedback {
  id           Int        @id @default(autoincrement())
  message      String
  filePath     String?
  submissionId Int
  userId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  fileName     String?
  Submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  User         User       @relation(fields: [userId], references: [id])
}

model Layout {
  id        Int         @id @default(autoincrement())
  name      String
  creatorId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  template  Json
  groupItem GroupItem[]
  creator   User        @relation(fields: [creatorId], references: [id])
}

model GroupItem {
  layoutId      Int
  layoutGroupId Int
  layoutGroup   LayoutGroup @relation(fields: [layoutGroupId], references: [id])
  layout        Layout      @relation(fields: [layoutId], references: [id], onDelete: Cascade)

  @@unique([layoutId, layoutGroupId])
}

model LayoutGroup {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  groupItem   GroupItem[]
}

model File {
  id       Int    @id @default(autoincrement())
  name     String
  path     String
  bucket   String
  fullPath String

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  bundleFile  BundleFile[]
  Bundle      Bundle[]      @relation(name: "captionFile")
  ContentFile ContentFile[]
}

model Folder {
  id             String           @id @default(uuid())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  slug           String           @unique
  bundel         Bundle[]
  GeneratedGroup GeneratedGroup[]
}

model GeneratedGroup {
  id        String   @id @default(uuid())
  name      String   @unique
  groups    String[]
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bundle {
  id            String       @id @default(uuid())
  name          String
  notes         String?
  folderId      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  folder        Folder       @relation(fields: [folderId], references: [id], onDelete: Cascade)
  bundleFile    BundleFile[]
  captionFileId Int?
  captionFile   File?        @relation(fields: [captionFileId], references: [id], name: "captionFile")
}

model BundleFile {
  bundleId String
  bundle   Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  fileId   Int
  file     File   @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([bundleId, fileId])
}

enum Role {
  MANAGER
  CREATOR
  DISTRIBUTOR
}

enum GeneratorStatus {
  NOT_GENERATE
  RUNNING
  FINISHED
  ERROR
}

enum ProposalStatus {
  WAITING
  ACCEPTED
  REJECTED
  REVISIED
}

enum StoryType {
  USER_GENERATE
  SYSTEM_GENERATE
}

enum AllocationType {
  SPECIFIC
  GENERIC
}
